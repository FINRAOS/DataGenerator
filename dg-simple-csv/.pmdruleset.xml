<?xml version="1.0" encoding="UTF-8"?>
<ruleset xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="M2Eclipse PMD RuleSet"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
   <description></description>
   <exclude-pattern>.*/Users/xiaoh/HackDataGenerator/dg-simple-csv/src/test/java.*</exclude-pattern>
   <exclude-pattern>.*/Users/xiaoh/HackDataGenerator/dg-simple-csv/target.*</exclude-pattern>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.2/rules/java/braces.html#IfStmtsMustUseBraces"
         language="java"
         message="Avoid using if statements without curly braces"
         name="IfStmtsMustUseBraces"
         since="1.0"
         typeResolution="false">
      <description>
Avoid using if statements without using braces to surround the code block. If the code 
formatting or indentation is lost then it becomes difficult to separate the code being
controlled from the rest.
     </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
                   
//IfStatement[count(*) &lt; 3][not(Statement/Block)]
                   
               </value>
         </property>
      </properties>
      <example>
 

if (foo)	// not recommended
	x++;

if (foo) {	// preferred approach
	x++;
}

 
     </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.2/rules/java/braces.html#WhileLoopsMustUseBraces"
         language="java"
         message="Avoid using 'while' statements without curly braces"
         name="WhileLoopsMustUseBraces"
         since="0.7"
         typeResolution="false">
      <description>
Avoid using 'while' statements without using braces to surround the code block. If the code 
formatting or indentation is lost then it becomes difficult to separate the code being
controlled from the rest.
      </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>

//WhileStatement[not(Statement/Block)]

                </value>
         </property>
      </properties>
      <example>

while (true)	// not recommended
      x++;
      
while (true) {	// preferred approach
      x++;
}

      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.2/rules/java/braces.html#IfElseStmtsMustUseBraces"
         language="java"
         message="Avoid using 'if...else' statements without curly braces"
         name="IfElseStmtsMustUseBraces"
         since="0.2"
         typeResolution="false">
      <description>
Avoid using if..else statements without using surrounding braces. If the code formatting 
or indentation is lost then it becomes difficult to separate the code being controlled 
from the rest.
       </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>

//Statement
 [parent::IfStatement[@Else='true']]
 [not(child::Block)]
 [not(child::IfStatement)]
 
                 </value>
         </property>
      </properties>
      <example>

   // this is OK
if (foo) x++;
   
   // but this is not
if (foo)
       x = x+1;
   else
       x = x-1;

       </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.2/rules/java/braces.html#ForLoopsMustUseBraces"
         language="java"
         message="Avoid using 'for' statements without curly braces"
         name="ForLoopsMustUseBraces"
         since="0.7"
         typeResolution="false">
      <description>
Avoid using 'for' statements without using curly braces. If the code formatting or 
indentation is lost then it becomes difficult to separate the code being controlled 
from the rest.
       </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
 
//ForStatement[not(Statement/Block)]
 
                 </value>
         </property>
      </properties>
      <example>

for (int i = 0; i &lt; 42; i++)
   foo();

       </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strictexception.AvoidCatchingThrowableRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.2/rules/java/strictexception.html#AvoidCatchingThrowable"
         message="A catch statement should never catch throwable since it includes errors."
         name="AvoidCatchingThrowable"
         since="1.2"
         typeResolution="true">
      <description>
Catching Throwable errors is not recommended since its scope is very broad. It includes runtime issues such as 
OutOfMemoryError that should be exposed and managed separately.
      </description>
      <priority>3</priority>
      <example>
	
public void bar() {
	try {
     // do something
    } catch (Throwable th) {  // should not catch Throwable
		th.printStackTrace();
    }
  }
	
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strictexception.SignatureDeclareThrowsExceptionRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.2/rules/java/strictexception.html#SignatureDeclareThrowsException"
         message="A method/constructor shouldn't explicitly throw java.lang.Exception"
         name="SignatureDeclareThrowsException"
         since="1.2"
         typeResolution="true">
      <description>
Methods that declare the generic Exception as a possible throwable are not very helpful since their
failure modes are unclear. Use a class derived from RuntimeException or a more specific checked exception.
      </description>
      <priority>3</priority>
      <example>
                
public void foo() throws Exception {
}
                
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strictexception.ExceptionAsFlowControlRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.2/rules/java/strictexception.html#ExceptionAsFlowControl"
         message="Avoid using exceptions as flow control."
         name="ExceptionAsFlowControl"
         since="1.8"
         typeResolution="true">
      <description>
Using Exceptions as form of flow control is not recommended as they obscure true exceptions when debugging.
Either add the necessary validation or use an alternate control structure.
      </description>
      <priority>3</priority>
      <example>
  
public void bar() {
    try {
      try {
      } catch (Exception e) {
        throw new WrapperException(e);
       // this is essentially a GOTO to the WrapperException catch block
       }
     } catch (WrapperException e) {
     // do some more stuff
    }
  }
  
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.2/rules/java/strictexception.html#AvoidCatchingNPE"
         language="java"
         message="Avoid catching NullPointerException; consider removing the cause of the NPE."
         name="AvoidCatchingNPE"
         since="1.8"
         typeResolution="false">
      <description>
Code should never throw NullPointerExceptions under normal circumstances.  A catch block may hide the 
original error, causing other, more subtle problems later on.
    </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
            
//CatchStatement/FormalParameter/Type
 /ReferenceType/ClassOrInterfaceType[@Image='NullPointerException']
 
        </value>
         </property>
      </properties>
      <example>  
public class Foo {
  void bar() {
    try {
      // do something
      }  catch (NullPointerException npe) {
    }
  }
}

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.2/rules/java/strictexception.html#AvoidThrowingRawExceptionTypes"
         language="java"
         message="Avoid throwing raw exception types."
         name="AvoidThrowingRawExceptionTypes"
         since="1.8"
         typeResolution="false">
      <description>
Avoid throwing certain exception types. Rather than throw a raw RuntimeException, Throwable,
Exception, or Error, use a subclassed exception or error instead.
    </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>
            
//AllocationExpression
 /ClassOrInterfaceType[
 (@Image='Throwable' and count(//ImportDeclaration/Name[ends-with(@Image,'Throwable')]) = 0)
or
 (@Image='Exception' and count(//ImportDeclaration/Name[ends-with(@Image,'Exception')]) = 0)
or
 (@Image='Error'  and count(//ImportDeclaration/Name[ends-with(@Image,'Error')]) = 0)
or
( @Image='RuntimeException'  and count(//ImportDeclaration/Name[ends-with(@Image,'RuntimeException')]) = 0)
]
 
        </value>
         </property>
      </properties>
      <example>
      
public class Foo {
  public void bar() throws Exception {
    throw new Exception();
   }
}

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.2/rules/java/strictexception.html#AvoidThrowingNullPointerException"
         language="java"
         message="Avoid throwing null pointer exceptions."
         name="AvoidThrowingNullPointerException"
         since="1.8"
         typeResolution="false">
      <description>
Avoid throwing NullPointerExceptions. These are confusing because most people will assume that the
virtual machine threw it. Consider using an IllegalArgumentException instead; this will be
clearly seen as a programmer-initiated exception.
      </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>
              
//AllocationExpression/ClassOrInterfaceType[@Image='NullPointerException']
   
          </value>
         </property>
      </properties>
      <example>
        
public class Foo {
  void bar() {
    throw new NullPointerException();
  }
}
  
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.2/rules/java/strictexception.html#AvoidRethrowingException"
         language="java"
         message="A catch statement that catches an exception only to rethrow it should be avoided."
         name="AvoidRethrowingException"
         since="3.8"
         typeResolution="false">
      <description>
Catch blocks that merely rethrow a caught exception only add to code size and runtime complexity.
    </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
                
//CatchStatement[FormalParameter
 /VariableDeclaratorId/@Image = Block/BlockStatement/Statement
 /ThrowStatement/Expression/PrimaryExpression[count(PrimarySuffix)=0]/PrimaryPrefix/Name/@Image
 and count(Block/BlockStatement/Statement) =1]
 
            </value>
         </property>
      </properties>
      <example>  
public void bar() {
    try {
    // do something
    }  catch (SomeException se) {
       throw se;
    }
}
  
    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.2/rules/java/strictexception.html#DoNotExtendJavaLangError"
         language="java"
         message="Exceptions should not extend java.lang.Error"
         name="DoNotExtendJavaLangError"
         since="4.0"
         typeResolution="false">
      <description>
      
Errors are system exceptions. Do not extend them.
      
    </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
          
//ClassOrInterfaceDeclaration/ExtendsList/ClassOrInterfaceType
  [@Image="Error" or @Image="java.lang.Error"]
          
        </value>
         </property>
      </properties>
      <example>
public class Foo extends Error { }
    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.2/rules/java/strictexception.html#DoNotThrowExceptionInFinally"
         language="java"
         message="A throw statement in a finally block makes the control flow hard to understand."
         name="DoNotThrowExceptionInFinally"
         since="4.2"
         typeResolution="false">
      <description>
			
Throwing exceptions within a 'finally' block is confusing since they may mask other exceptions 
or code defects.
Note: This is a PMD implementation of the Lint4j rule "A throw in a finally block"
			
		</description>
      <priority>4</priority>
      <properties>
         <property name="xpath">
            <value>
			    
//FinallyStatement[descendant::ThrowStatement]
			          
			  </value>
         </property>
      </properties>
      <example>
    		
public class Foo {
	public void bar() {
		try {
			// Here do some stuff
		} catch( Exception e) {
			// Handling the issue
		} finally {
			// is this really a good idea ?
			throw new Exception();
		}
	}
}
	    	
    	</example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.2/rules/java/strictexception.html#AvoidThrowingNewInstanceOfSameException"
         language="java"
         message="A catch statement that catches an exception only to wrap it in a new instance of the same type of exception and throw it should be avoided"
         name="AvoidThrowingNewInstanceOfSameException"
         since="4.2.5"
         typeResolution="false">
      <description>
Catch blocks that merely rethrow a caught exception wrapped inside a new instance of the same type only add to
code size and runtime complexity.
    </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
        
//CatchStatement[
  count(Block/BlockStatement/Statement) = 1
  and
  FormalParameter/Type/ReferenceType/ClassOrInterfaceType/@Image = Block/BlockStatement/Statement/ThrowStatement/Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression/ClassOrInterfaceType/@Image
  and
  count(Block/BlockStatement/Statement/ThrowStatement/Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression/Arguments/ArgumentList/Expression) = 1
  and
  FormalParameter/VariableDeclaratorId = Block/BlockStatement/Statement/ThrowStatement/Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name
  ]
 
      </value>
         </property>
      </properties>
      <example>  
public void bar() {
      try {
       // do something
      }  catch (SomeException se) {
         // harmless comment      
           throw new SomeException(se);
      }
}
  
    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.2/rules/java/strictexception.html#AvoidCatchingGenericException"
         language="java"
         message="Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block"
         name="AvoidCatchingGenericException"
         since="4.2.6"
         typeResolution="false">
      <description>
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
    </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
      
        //CatchStatement/FormalParameter/Type/ReferenceType/ClassOrInterfaceType[
          @Image='NullPointerException' or
          @Image='Exception' or
          @Image='RuntimeException']
      
      </value>
         </property>
      </properties>
      <example>
    
package com.igate.primitive;
    
public class PrimitiveType {
    
  public void downCastPrimitiveType() {
    try {
      System.out.println(" i [" + i + "]");
    } catch(Exception e) {
      e.printStackTrace();
    } catch(RuntimeException e) {
      e.printStackTrace();
    } catch(NullPointerException e) {
      e.printStackTrace();
    }
  } 
}
    
    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.2/rules/java/strictexception.html#AvoidLosingExceptionInformation"
         language="java"
         message="Avoid statements in a catch block that invoke accessors on the exception without using the information"
         name="AvoidLosingExceptionInformation"
         since="4.2.6"
         typeResolution="false">
      <description>
Statements in a catch block that invoke accessors on the exception without using the information
only add to code size.  Either remove the invocation, or use the return result.
		</description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>

//CatchStatement/Block/BlockStatement/Statement/StatementExpression/PrimaryExpression/PrimaryPrefix/Name
[
   @Image = concat(../../../../../../../FormalParameter/VariableDeclaratorId/@Image, '.getMessage')
   or
   @Image = concat(../../../../../../../FormalParameter/VariableDeclaratorId/@Image, '.getLocalizedMessage')
   or
   @Image = concat(../../../../../../../FormalParameter/VariableDeclaratorId/@Image, '.getCause')
   or
   @Image = concat(../../../../../../../FormalParameter/VariableDeclaratorId/@Image, '.getStackTrace')
   or
   @Image = concat(../../../../../../../FormalParameter/VariableDeclaratorId/@Image, '.toString')
]

				</value>
         </property>
      </properties>
      <example>

public void bar() {
	try {
		// do something
	} catch (SomeException se) {
		se.getMessage();
	}
}

		</example>
   </rule>
</ruleset>